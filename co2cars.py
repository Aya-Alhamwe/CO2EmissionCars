# -*- coding: utf-8 -*-
"""Co2Cars.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bDWXjEFenvnAXWrcyGGdpRpjjp2KBoHY

## Import Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import KFold
from sklearn import linear_model
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

"""## Load Data

"""

url= "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%202/data/FuelConsumptionCo2.csv"

df = pd.read_csv(url)

"""## Data Overview"""

df.sample(5)

df.columns

df.shape

df.info()

df.describe()

df.isnull().sum()

df.duplicated().sum()

"""##Feature Selection

Select a few features that might be indicative of CO2 emission to explore more.

"""

cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]
cdf.sample(9)

"""## Data Visualization (Feature Relationships)
Consider the histograms for each of these features.

"""

viz = cdf[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]
viz.hist()
plt.show()

""" Visualizing the relationship between fuel consumption and CO2 emissions with a scatter plot

"""

plt.scatter(cdf.FUELCONSUMPTION_COMB, cdf.CO2EMISSIONS,  color='blue')
plt.xlabel("FUELCONSUMPTION_COMB")
plt.ylabel("Emission")
plt.show()

"""Scatter plot showing the relationship between engine size and CO2 emissions

"""

plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS , color='blue')
plt.xlabel('Engine size')
plt.ylabel('Emission')
plt.xlim(0,27)
plt.show()

"""Plot __CYLINDER__ against CO2 Emission, to see how linear their relationship is.

"""

plt.scatter(cdf.CYLINDERS, cdf.CO2EMISSIONS , color='blue')
plt.xlabel('Cylinders')
plt.ylabel('Emission')
plt.show()

"""
## Model 1: Using Engine Size
Prepare input (X) and output (y) arrays"""

X = cdf.ENGINESIZE.to_numpy()
y = cdf.CO2EMISSIONS.to_numpy()

"""Split data into 80% training and 20% testing sets"""

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2 , random_state=43)

"""### Build a simple linear regression model"""

# create a model object
regressor = LinearRegression()

# train the model on the training data
# X_train is a 1-D array but sklearn models expect a 2D array as input for the training data, with shape (n_observations, n_features).
# So we need to reshape it. We can let it infer the number of observations using '-1'.
regressor.fit(X_train.reshape(-1, 1), y_train)

# Print the coefficients
print ('Coefficients: ', regressor.coef_[0]) # with simple linear regression there is only one coefficient, here we extract it from the 1 by 1 array.
print ('Intercept: ',regressor.intercept_)

"""### Visualize model outputs

"""

plt.scatter(X_train, y_train,  color='blue')
plt.plot(X_train, regressor.coef_ * X_train + regressor.intercept_, '-r')
plt.xlabel("Engine size")
plt.ylabel("Emission")

"""## Evaluation (Engine Size)"""

# Use the predict method to make test predictions
y_test_ = regressor.predict(X_test.reshape(-1,1))

# Evaluation
print("Mean absolute error: %.2f" % mean_absolute_error(y_test, y_test_))
print("Mean squared error: %.2f" % mean_squared_error(y_test, y_test_))
print("Root mean squared error: %.2f" % np.sqrt(mean_squared_error(y_test, y_test_)))
print("R2-score: %.2f" % r2_score(y_test, y_test_))

"""Plot the regression model result over the test data instead of the training data. Visually evaluate whether the result is good.

"""

plt.scatter(X_test, y_test,  color='blue')
plt.plot(X_test, regressor.coef_ * X_test + regressor.intercept_, '-r')
plt.xlabel("Engine size")
plt.ylabel("Emission")

"""## Model 2: Using Fuel Consumption

"""

X = cdf.FUELCONSUMPTION_COMB.to_numpy()
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)

"""#### 3.  Train a linear regression model using the training data you created.
Remember to transform your 1D feature into a 2D array.

"""

regr = linear_model.LinearRegression()
regr.fit(X_train.reshape(-1, 1), y_train)

"""## Evaluation (Fuel Consumption Model)"""

y_test_ = regr.predict(X_test.reshape(-1,1))

# Evaluation
print("Mean absolute error: %.2f" % mean_absolute_error(y_test, y_test_))
print("Mean squared error: %.2f" % mean_squared_error(y_test, y_test_))
print("Root mean squared error: %.2f" % np.sqrt(mean_squared_error(y_test, y_test_)))
print("R2-score: %.2f" % r2_score(y_test, y_test_))

plt.scatter(X_test, y_test, color='blue', label='Actual')
plt.plot(X_test, regr.coef_[0] * X_test + regr.intercept_, color='red', label='Predicted')
plt.xlabel("FUELCONSUMPTION_COMB")
plt.ylabel("CO2 Emissions")
plt.title("Prediction Before Log Transformation")
plt.legend()
# Save the figure
plt.savefig("prediction_before_log.png", dpi=300)
plt.show()

"""## Log Transformation"""

#Apply logarithmic transformation
X = np.log(cdf['FUELCONSUMPTION_COMB'].to_numpy())

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Reshape X to 2D
X_train = X_train.reshape(-1, 1)
X_test = X_test.reshape(-1, 1)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

"""## Evaluation (Log-Transformed Model)"""

# Predict on test set
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

# Print results
print("Evaluation with log-transformed feature:")
print("Mean Absolute Error: %.2f" % mae)
print("Mean Squared Error: %.2f" % mse)
print("Root Mean Squared Error: %.2f" % rmse)
print("R2-score: %.2f" % r2)

plt.scatter(X_test, y_test, color='blue', label='Actual')
plt.plot(X_test, y_pred, color='red', label='Predicted')
plt.xlabel("log(FUELCONSUMPTION_COMB)")
plt.ylabel("CO2 Emissions")
plt.title("Prediction After Log Transformation")
plt.legend()
# Save the figure
plt.savefig("prediction_after_log.png", dpi=300)
plt.show()

"""## Cross-Validation"""

# Apply logarithmic transformation to the fuel consumption feature
X = np.log(cdf['FUELCONSUMPTION_COMB'].to_numpy()).reshape(-1, 1)
y = cdf['CO2EMISSIONS'].to_numpy()

# Create a linear regression model
model = LinearRegression()

# Perform 5-fold cross-validation using R² as the evaluation metric
scores = cross_val_score(model, X, y, cv=5, scoring='r2')

# Print R² scores for each fold and the average score
print("R² scores for each fold:", scores)
print("Average R²:", np.mean(scores))

